--- a/fft/mpfq/mpfq.h	2019-08-29 22:31:23.960166258 +0200
+++ b/fft/mpfq/mpfq.h	2019-09-04 14:21:13.548563000 +0200
@@ -187,45 +187,6 @@
 
 /***  Some useful macros ***/
 
-/* use these only for the large malloc()s, please */
-static inline void * mpfq_malloc_check(size_t s) {
-    void * r = malloc(s);
-#ifdef  MPFQ_TRACK_MALLOC
-    if (s>>28) { fprintf(stderr, "MALLOC(%.1f)\n", s/1048576.); }
-#endif
-    if (!r) {
-        fprintf(stderr, "malloc(%zu) failed\n", s);
-        abort();
-    }
-    return r;
-}
-
-static inline void * mpfq_realloc_check(void * p, size_t os, size_t s) {
-    void * r = realloc(p, s);
-#ifdef  MPFQ_TRACK_MALLOC
-    if (s>>28) { fprintf(stderr, "REALLOC(%.1f, %.1f)\n", os/1048576., s/1048576.); }
-#endif
-    if (s && !r) {
-        fprintf(stderr, "realloc(%zu, %zu) failed\n", os, s);
-        abort();
-    }
-    return r;
-}
-
-static inline void mpfq_free(void * p, size_t s MAYBE_UNUSED)
-{
-#ifdef  MPFQ_TRACK_MALLOC
-    if (s>>28) { fprintf(stderr, "FREE(%.1f)\n", s/1048576.); }
-#endif
-    free(p);
-}
-
-static inline void malloc_failed() {
-    fprintf(stderr, "malloc() failed\n");
-    abort();
-}
-
-
 #if 0
 
 /* Given the fact that copies are always very small, we're probably
